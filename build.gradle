/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'buls' at '10/31/16 2:00 PM' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()

    }

    dependencies {
        classpath 'mysql:mysql-connector-java:5.1.49' //for flyway
    }
}

plugins {
    id "org.flywaydb.flyway" version "6.4.1"
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven'

group = "com.innovativeapps.fooddelivery.api"
version = "0.0.1"
description = "filehandling api"

def moduleName = "${rootProject.name}"
def projectName = "filehandling-api"
def archivePath = "${project.buildDir}${File.separator}libs${File.separator}${moduleName}-${version}.war"
def gf = System.env.GLASSFISH_HOME ?: "${glassfishHome}"
def dd = System.env.DEPLOY_DIR ?: "${deploymentDir}"
def glassfishHome = "${gf}${File.separator}bin"
def deployedAppDir = "${dd}${File.separator}${moduleName}"
def deployedClassesDir = "${deployedAppDir}${File.separator}WEB-INF${File.separator}classes"
def buildClassesDir = "${project.buildDir}${File.separator}classes${File.separator}main"
def warDir = "${rootDir}${File.separator}war"
def warClassesDir = "${warDir}${File.separator}WEB-INF${File.separator}classes"
def cssDir = "${rootDir}${File.separator}src${File.separator}main${File.separator}webapp${File.separator}css"
def deployedCssDir = "${deployedAppDir}${File.separator}css"
def appContext = "${appContext}"
def configDir = "${projectDir}${File.separator}src${File.separator}main${File.separator}resources${File.separator}config"
def mysqlUser = System.env.MYSQL_USER ?: mysqlUser
def mysqlPassword = System.env.MYSQL_PASSWORD ?: mysqlPassword
def dbUrl = System.env.DB_URL ?: dbUrl
def migrationDir = System.env.MIGRATION_DIR ?: migrationDir
def containerName = "${containerName}"
def containerDeployPath = "${containerDeployPath}"
def containerAsadmin = "${containerAsadmin}"
def containerConfig = "${containerConfig}"
def containerAdminPassword = "${containerAdminPassword}"
def mysqlDataSourceClassName= "${mysqlDataSourceClassName}"
def mysqlDbName= "${mysqlDbName}"
def mysqlServer= "${mysqlServer}"
def mysqlPort= "${mysqlPort}"
def connectionPoolName= "${connectionPoolName}"
def jdbcResourceName= "${jdbcResourceName}"
def mysqlDbUrl = "jdbc\\:mysql\\://${mysqlServer}\\:${mysqlPort}${File.separator}${mysqlDbName}"

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "http://repo1.maven.org/maven2"
    }
    maven {
        url 'http://jasperreports.sourceforge.net/maven2'
    }
    maven {
        url 'http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts/'
    }
}

dependencies {
    //compile group: "javax", name: "javaee-api", version: "8.0"
    compile group: 'jakarta.platform', name: 'jakarta.jakartaee-api', version: '8.0.0'
    //compile group: "org.eclipse.persistence", name: "javax.persistence", version: "2.2.1"
    compile group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: '2.2.3'
    compile group: "org.eclipse.persistence", name: "eclipselink", version: "2.7.7"
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.11.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.11.0'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.14'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    compile group: 'commons-io', name: 'commons-io', version: '2.8.0'

    compile 'org.slf4j:slf4j-api:1.7.30'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.27.0'
}

def isWindows() {
    return System.properties['os.name'].toLowerCase().contains('windows')
}

def asadmin() {
    if (isWindows()) {
        return ['cmd', '/c', 'asadmin.bat']
    } else {
        return './asadmin'
    }
}

def touch() {
    if (isWindows()) {
        return ['copy', '/b']
    } else {
        return 'touch'
    }
}

task deploy(dependsOn: "war", type: Exec) {
    workingDir glassfishHome
    commandLine asadmin()
    args "deploy", "--force=true", "--name=${moduleName}", "${archivePath}"
}

task undeploy(type: Exec) {
    workingDir glassfishHome
    commandLine asadmin()
    args "undeploy", "${moduleName}"
}

task redeployApp(dependsOn: "copyForReload", type: Exec) {
    workingDir glassfishHome
    commandLine asadmin()
    args "redeploy", "--keepstate=true", "--name=${moduleName}", "${archivePath}"
}

task redeploy {
    dependsOn "redeployApp"
}

task reloadClasses(dependsOn: "compileJava", type: Copy) {
    from file("${buildClassesDir}")
    into file("${deployedClassesDir}")
}

task reloadCss(type: Copy) {
    from file("${cssDir}")
    into file("${deployedCssDir}")
}

task reloadClient(dependsOn: "copyForReload", type: Exec) {
    workingDir deployedAppDir
    commandLine touch()
    if (isWindows()) {
        args "${deployedAppDir}${File.separator}.reload", "+,,"
    } else {
        args "${deployedAppDir}${File.separator}.reload"
    }
}

task copyForReload(dependsOn: "war", type: Copy) {
    from zipTree(file("${archivePath}"))
    into file("${deployedAppDir}")
}


task reload {
    dependsOn "reloadClient"
}

task dockerCreateConnectionPool(type: Exec) {
    commandLine "docker"
    args "exec", "${containerName}", "${containerAsadmin}", "--user", "admin", "--passwordfile", "${containerAdminPassword}", "create-jdbc-connection-pool", "--datasourceclassname", "${mysqlDataSourceClassName}", "--restype", "javax.sql.DataSource", "--property", "user=${mysqlUser}:password=${mysqlPassword}:DatabaseName=${mysqlDbName}:ServerName=${mysqlServer}:port=${mysqlPort}:url=${mysqlDbUrl}", "${connectionPoolName}"
}

task dockerCreateJdbcResource(dependsOn: "dockerCreateConnectionPool", type: Exec) {
    commandLine "docker"
    args "exec", "${containerName}", "${containerAsadmin}", "--user", "admin", "--passwordfile", "${containerAdminPassword}", "create-jdbc-resource", "--connectionpoolid", "${connectionPoolName}", "${jdbcResourceName}"
}

task dockerRemoveJdbcResource(type: Exec) {
    commandLine "docker"
    args "exec", "${containerName}", "${containerAsadmin}", "--user", "admin", "--passwordfile", "${containerAdminPassword}", "delete-jdbc-connection-pool", "--cascade=true", "${connectionPoolName}"
}

task dockerCopyWar(dependsOn: "war", type: Exec) {
    commandLine "docker"
    args "cp", "${archivePath}", "${containerName}:${containerDeployPath}${File.separator}${moduleName}-${version}.war"
}

task dockerDeploy(dependsOn: "dockerCopyWar", type: Exec) {
    commandLine "docker"
    args "exec", "${containerName}", "${containerAsadmin}", "--user", "admin", "--passwordfile", "${containerAdminPassword}", "deploy", "--force=true", "--name=${appContext}", "${containerDeployPath}${File.separator}${moduleName}-${version}.war"
}

task dockerCopyWarProduction(dependsOn: "war", type: Exec) {
    commandLine "docker"
    args "cp", "${archivePath}", "${productionContainerName}:${containerDeployPath}${File.separator}${moduleName}-${version}.war"
}

task dockerDeployProduction(dependsOn: "dockerCopyWarProduction", type: Exec) {
    commandLine "docker"
    args "exec", "${productionContainerName}", "${containerAsadmin}", "--user", "admin", "--passwordfile", "${containerAdminPassword}", "deploy", "--force=true", "--name=${appContext}", "${containerDeployPath}${File.separator}${moduleName}-${version}.war"
}


flyway {
    user = mysqlUser
    password = mysqlPassword
    url = dbUrl
    locations=["filesystem:$migrationDir"]
    sqlMigrationPrefix= appContext
    baselineOnMigrate=true
    outOfOrder=true //to allow migration of lower than current version
}

task prefixNewMigrations {

    fileTree(dir: migrationDir).exclude({ isFilePrefixed(it.file) }).each { file ->
        doLast {
            def timestamp = new Date().format('yyyyMMddHHmmssSSS', TimeZone.getTimeZone('GMT'))

            println "Renaming $file.name to ${appContext}${timestamp}__$file.name"

            file.renameTo("$file.parentFile.absolutePath$file.separator${appContext}${timestamp}__$file.name")

            // Sleep for a moment to avoid prefix conflicts when renaming multiple files
            sleep(1*1000)
        }
    }
}

def isFilePrefixed(file) {
    return (file.name ==~ '^.*\\d+__.*\\.sql\$')
}

flywayInfo.dependsOn prefixNewMigrations
flywayMigrate.dependsOn prefixNewMigrations
